# -*- coding: utf-8 -*-
# Configured by Doxygen
# @PROJECT_NAME@
# @PROJECT_VERSION@
# @PROJECT_DESCRIPTION@
# @THE_YEAR@
# @THE_PROJECT_VENDOR@
# @THE_PROJECT_AUTHOR@
# @CMAKE_SOURCE_DIR@
# @DOXYGEN_OUTPUT_DIRECTORY@
#
#
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

from functools import partial, update_wrapper

# You only need to import these if you build multiple exhale targets, see bottom
import exhale
import exhale.configs
import exhale.utils
import exhale.deploy
import os
import os.path
from pprint import pprint


def specKindAPI(kind):
    '''
    For a given input ``kind``, return the list of reStructuredText
    specifications for the associated Breathe directive.
    '''
    # Change the defaults for .. doxygenclass:: and .. doxygenstruct::
    if kind == "class" or kind == "struct":
        return [
          ":members:",
          ":protected-members:",
          ":private-members:",
          ":undoc-members:",
          ":project: @PROJECT_NAME@"
        ]
    # Change the defaults for .. doxygenenum::
    elif kind == "enum":
        return [":no-link:",
                ":project: @PROJECT_NAME@"]

    # An empty list signals to Exhale to use the defaults
    else:
        return [":project: @PROJECT_NAME@"]

def specKindPRIV(kind):
    '''
    For a given input ``kind``, return the list of reStructuredText
    specifications for the associated Breathe directive.
    '''
    # Change the defaults for .. doxygenclass:: and .. doxygenstruct::
    if kind == "class" or kind == "struct":
        return [
          ":members:",
          ":protected-members:",
          ":private-members:",
          ":undoc-members:",
          ":project: @PROJECT_NAME@-private"
        ]
    # Change the defaults for .. doxygenenum::
    elif kind == "enum":
        return [":no-link:",
                ":project: @PROJECT_NAME@-private"]

    # An empty list signals to Exhale to use the defaults
    else:
        return [":project: @PROJECT_NAME@-private"]


def specificationsForKind(kind, project):
    '''
    For a given input ``kind``, return the list of reStructuredText
    specifications for the associated Breathe directive.
    '''
    # Change the defaults for .. doxygenclass:: and .. doxygenstruct::
    if kind == "class" or kind == "struct":
        return [
          ":members:",
          ":protected-members:",
          ":private-members:",
          ":undoc-members:",
          ":project: {}".format(project)
        ]
    # Change the defaults for .. doxygenenum::
    elif kind == "enum":
        return [":no-link:",
                ":project: {}".format(project)]
    # An empty list signals to Exhale to use the defaults
    else:
        return [":project: {}".format(project)]


# -- Project information -----------------------------------------------------

project = '@PROJECT_NAME@'
copyright = @THE_YEAR@ + ', @THE_PROJECT_VENDOR@'
author = '@THE_PROJECT_AUTHOR@'

# The short X.Y version
version = '@PROJECT_VERSION@'
# The full version, including alpha/beta/rc tags
release = ''


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
needs_sphinx = '4.0'

if "@WITH_API_DOC@" == "1" or "@WITH_API_DOC@" == "ON":
    with_exhale = True
else:
    with_exhale = False

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx_rtd_theme",
    "breathe",
    "sphinx.ext.mathjax",
    "sphinx.ext.autosectionlabel",
    "sphinx.ext.inheritance_diagram",
    "sphinx.ext.todo",
    "sphinxcontrib.plantuml"
    ]

if with_exhale:
    extensions.append("exhale")
else:
    extensions.append("sphinxcontrib.inkscapeconverter")

autosectionlabel_prefix_document = True

# See bottom of file

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ['.rst']

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'emacs'

# Check pygment styles run this python code in an interpreter:
# from pygments.styles import get_all_styles
# list(get_all_styles())

# Choices: png, svg, svg_img, svg_obj
plantuml_output_format = 'svg_img'

# -- Breathe and Exhale ------------------------------------------------------

# Use exhale's utility function to transform `specificationsForKind`
# defined above into something Exhale can use
from exhale import utils
import textwrap

breathe_default_project = '@PROJECT_NAME@'

exhale_args = {
    "verboseBuild": False,
    "containmentFolder":      "./api",
    "rootFileName":           "library-api.rst",
    "contentsTitle":          "Page Contents",
    "rootFileTitle":          "Library API",
    "doxygenStripFromPath":   "@CMAKE_SOURCE_DIR@/include",
    "fullApiSubSectionTitle": "Items listing",
    "createTreeView":        True,
    "afterTitleDescription": textwrap.dedent(
        ''' '''),
    "afterHierarchyDescription": textwrap.dedent(
        ''' '''),
    "afterBodySummary": textwrap.dedent(
        ''' '''),
    "exhaleExecutesDoxygen": False,
    "lexerMapping": {
      r".*\.qml": "qml"
    }
    # "exhaleDoxygenStdin":    "INPUT = ../include",
    # TIP: if using the sphinx-bootstrap-theme, you need
    # "treeViewIsBootstrap": True
}

# Tell sphinx what the primary language being documented is.
primary_domain = 'cpp'

# Tell sphinx what the pygments highlight language should be.
highlight_language = 'cpp'


# EXPERIMENTAL for multiple projects and xml listings to be handled by exhale

breathe_projects = {
    "@PROJECT_NAME@":         "@DOXYGEN_OUTPUT_DIRECTORY@/xml",
    "@PROJECT_NAME@-private": "@DOXYGEN_OUTPUT_DIRECTORY@/xml_priv"
}
# Did not get this to work.. yet
specForAPI = update_wrapper(partial(specificationsForKind,
                                    project="@PROJECT_NAME@"),
                            specificationsForKind)
specForPRIV = update_wrapper(partial(specificationsForKind,
                                     project="@PROJECT_NAME@-private"),
                             specificationsForKind)

exhale_projects_args = {
    "@PROJECT_NAME@": {
      "contentsTitle":          "Page Contents",
      "fullApiSubSectionTitle": "Items listing",
      "containmentFolder":      "@SPHINX_SOURCE@/api",
      "doxygenStripFromPath":   "@CMAKE_SOURCE_DIR@/include",
      "rootFileName":           "library-api.rst",
      "rootFileTitle":          "Public API",
      "customSpecificationsMapping":
        utils.makeCustomSpecificationsMapping(specKindAPI),
      "createTreeView":         True,
      "afterTitleDescription":  textwrap.dedent(
        ''' '''),
      "afterHierarchyDescription": textwrap.dedent(
        ''' '''),
      "afterBodySummary":       textwrap.dedent(
        ''' '''),
      "exhaleExecutesDoxygen":  False,
      "lexerMapping":           { r".*\.qml": "qml" }
    },
    "@PROJECT_NAME@-private": {
      "contentsTitle":          "Page Contents",
      "fullApiSubSectionTitle": "Items listing",
      "containmentFolder":      "@SPHINX_SOURCE@/api_private",
      "doxygenStripFromPath":   "@CMAKE_SOURCE_DIR@",
      "rootFileName":           "library-api-private.rst",
      "rootFileTitle":          "Private API",
      "customSpecificationsMapping":
      utils.makeCustomSpecificationsMapping(specKindPRIV),
      "createTreeView":         False, # There is a bug so only one exhale can have treeview which are collapsible
      "afterTitleDescription":  textwrap.dedent(
        '''As a library consumer, you do not need to/cannot directly use the private API'''),
      "afterHierarchyDescription": textwrap.dedent(
        ''' '''),
      "afterBodySummary":       textwrap.dedent(
        ''' '''),
      "exhaleExecutesDoxygen":  False,
      "lexerMapping":           { r".*\.qml": "qml" }
    }
}


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

html_theme_options = {
    'collapse_navigation': False,
    'prev_next_buttons_location': 'both',
    'style_external_links': True,
    'style_nav_header_background': '#00457c'
}

html_context = {
    "display_github": True,  # Integrate GitHub
    'github_url': 'https://github.com/sintef-ocean/sinspekto',
    "sintef_home_url": "https://docs.sintef.io",
    "sintef_home": "docs.sintef.io",
}

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}
# https://sphinx-rtd-theme.readthedocs.io/en/latest/configuring.html


# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['static']

html_logo = 'static/logo.png'
html_favicon = 'static/icon.ico'
html_show_sourcelink = False

html_js_files = ['mathwork.js']

# For directives todo and titlist

todo_include_todos = True
todo_emit_warnings = False
todo_link_only = False


# EXPERIMENTAL to allow multiple breathe projects to be processed by exhale
# Cross-referencing does not seem to work properly

def exhale_environment_ready(app):
    default_project = app.config.breathe_default_project
    default_exhale_args = dict(app.config.exhale_args)

    exhale_projects_args = dict(app.config._raw_config['exhale_projects_args'])
    breathe_projects = dict(app.config._raw_config['breathe_projects'])

    for project in breathe_projects:
        app.config.breathe_default_project = project
        os.makedirs(breathe_projects[project], exist_ok=True)

        project_exhale_args = exhale_projects_args.get(project, {})

        app.config.exhale_args = dict(default_exhale_args)
        app.config.exhale_args.update(project_exhale_args)
        app.config.exhale_args["containmentFolder"] = \
        os.path.realpath(app.config.exhale_args["containmentFolder"])

        # First, setup the extension and verify all of the configurations.
        exhale.configs.apply_sphinx_configurations(app)
        ####### Next, perform any cleanup

        # Generate the full API!
        try:
            exhale.deploy.explode()
        except:
            exhale.utils.fancyError("Exhale: could not generate reStructuredText documents :/")

    app.config.breathe_default_project = default_project

exhale.environment_ready = exhale_environment_ready
